        -:    0:Source:E:/CppProject/dataStruct2023/LSMkv/src/skiplist.cpp
        -:    0:Graph:E:\CppProject\dataStruct2023\LSMkv\cmake-build-debug-coverage\CMakeFiles\LSMkv_persist.dir\src\skiplist.cpp.gcno
        -:    0:Data:E:\CppProject\dataStruct2023\LSMkv\cmake-build-debug-coverage\CMakeFiles\LSMkv_persist.dir\src\skiplist.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "../header/skiplist.h"
        -:    2:
function _ZN8SkipList5clearERP4node called 2884 returned 100% blocks executed 100%
     2884:    3:void SkipList::clear(node *&h) {
     2884:    4:    if( !h ) return;
     2884:    4-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 2881
        3:    4-block  1
     2881:    5:    clear(h->point_list[0]);
     2881:    5-block  0
call    0 returned 2881
call    1 returned 2881
     2881:    6:    delete h;
branch  0 taken 2881 (fallthrough)
branch  1 taken 0
     2881:    6-block  0
call    2 returned 2881
call    3 returned 2881
     2881:    7:    h = nullptr;
     2881:    7-block  0
        -:    8:}
        -:    9:
function _ZN8SkipListD2Ev called 3 returned 100% blocks executed 100%
        3:   10:SkipList::~SkipList() {
        3:   11:    clear(head);
        3:   11-block  0
call    0 returned 3
        3:   12:}
        -:   13:
function _ZN8SkipListC2Ev called 4 returned 100% blocks executed 48%
        4:   14:SkipList::SkipList() {
        4:   15:    P = 368; // probability = 1/e
        4:   16:    tail = new node(-1);//origin used INT_MAX
        4:   16-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        4:   16-block  1
call    4 returned 4
branch  5 taken 4 (fallthrough)
branch  6 taken 0 (throw)
        4:   16-block  2
call    7 returned 4
branch  8 taken 4 (fallthrough)
branch  9 taken 0 (throw)
        4:   16-block  3
call   10 returned 4
call   11 returned 4
    $$$$$:   16-block  4
call   12 never executed
    $$$$$:   16-block  5
call   13 never executed
    $$$$$:   16-block  6
    $$$$$:   16-block  7
call   14 never executed
    $$$$$:   16-block  8
call   15 never executed
        4:   17:    head = new node(0,"",tail);
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        4:   17-block  0
call    4 returned 4
branch  5 taken 4 (fallthrough)
branch  6 taken 0 (throw)
        4:   17-block  1
call    7 returned 4
branch  8 taken 4 (fallthrough)
branch  9 taken 0 (throw)
        4:   17-block  2
call   10 returned 4
call   11 returned 4
    $$$$$:   17-block  3
call   12 never executed
    $$$$$:   17-block  4
call   13 never executed
    $$$$$:   17-block  5
    $$$$$:   17-block  6
call   14 never executed
        4:   18:    Max_level = 0;
        4:   19:    key_num = 0;
        4:   20:    max_key = 0;
        4:   21:    min_key = -1;
        4:   22:    Size = 10272; //Header + BloomFilter
        4:   23:}
        -:   24:
        -:   25:/*
        -:   26: * @brief: insert a node into the skiplist,update the Size
        -:   27: * @param key: the key of the node
        -:   28: * @param s: the string of the node
        -:   29: * @return: true :success
        -:   30: *         false: skipList is full
        -:   31: * //TODO: if delete twice?
        -:   32: * */
function _ZN8SkipList6insertEyRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 5935 returned 100% blocks executed 88%
     5935:   33:bool SkipList::insert(uint64_t key, const string &s) {
     5935:   34:    int curr_level = Max_level;
     5935:   35:    node* next = head;
    5935*:   36:    node** update_list = new node*[Max_level + 1];
     5935:   36-block  0
branch  0 taken 5935 (fallthrough)
branch  1 taken 0
     5935:   36-block  1
    %%%%%:   36-block  2
call    2 never executed
     5935:   36-block  3
call    3 returned 5935
branch  4 taken 5935 (fallthrough)
branch  5 taken 0 (throw)
        -:   37:
        -:   38:
   109580:   39:    while(curr_level >= 0) {
     5935:   39-block  0
   109580:   39-block  1
branch  0 taken 104406
branch  1 taken 5174 (fallthrough)
   104406:   40:        if( key < next->point_list[curr_level]->key) {
   104406:   40-block  0
call    0 returned 104406
branch  1 taken 39118 (fallthrough)
branch  2 taken 65288
    39118:   41:            update_list[curr_level] = next;//后续可能需要更新
    39118:   42:            curr_level--;
    39118:   43:            continue;
    39118:   43-block  0
        -:   44:        }
    65288:   45:        if( key == next->point_list[curr_level]->key){
    65288:   45-block  0
call    0 returned 65288
branch  1 taken 761 (fallthrough)
branch  2 taken 64527
      761:   46:            delete []update_list;
      761:   46-block  0
branch  0 taken 761 (fallthrough)
branch  1 taken 0
      761:   46-block  1
call    2 returned 761
      761:   47:            string old = next->point_list[curr_level]->s;
      761:   47-block  0
call    0 returned 761
call    1 returned 761
branch  2 taken 761 (fallthrough)
branch  3 taken 0 (throw)
      761:   48:            if(Size + s.size() - old.size() > CAPACITY) //替换旧值时超出容量，不替换，dump后插入新的memtable
      761:   48-block  0
call    0 returned 761
call    1 returned 761
branch  2 taken 1 (fallthrough)
branch  3 taken 760
        1:   49:                return false;
        1:   49-block  0
      760:   50:            next->point_list[curr_level]->s = s;
      760:   50-block  0
call    0 returned 760
call    1 returned 760
branch  2 taken 760 (fallthrough)
branch  3 taken 0 (throw)
      760:   51:            Size += s.size() - old.size();
      760:   51-block  0
call    0 returned 760
call    1 returned 760
      760:   52:            return true;
      761:   53:        }
      761:   53-block  0
call    0 returned 761
    $$$$$:   53-block  1
call    1 never executed
    64527:   54:        if( key > next->point_list[curr_level]->key)
    64527:   54-block  0
call    0 returned 64527
branch  1 taken 64527 (fallthrough)
branch  2 taken 0
    64527:   55:            next = next->point_list[curr_level];
    64527:   55-block  0
call    0 returned 64527
        -:   56:    }
        -:   57:
     5174:   58:    if(Size + s.size() + 13 > CAPACITY) {
     5174:   58-block  0
call    0 returned 5174
branch  1 taken 2 (fallthrough)
branch  2 taken 5172
        2:   59:        delete []update_list;
        2:   59-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:   59-block  1
call    2 returned 2
        2:   60:        return false;
        2:   60-block  0
        -:   61:    }
     5172:   62:    node* NewNode = new node(key, s,next->point_list[0]);
     5172:   62-block  0
call    0 returned 5172
branch  1 taken 5172 (fallthrough)
branch  2 taken 0 (throw)
     5172:   62-block  1
call    3 returned 5172
call    4 returned 5172
branch  5 taken 5172 (fallthrough)
branch  6 taken 0 (throw)
     5172:   62-block  2
call    7 returned 5172
branch  8 taken 5172 (fallthrough)
branch  9 taken 0 (throw)
     5172:   62-block  3
call   10 returned 5172
    $$$$$:   62-block  4
call   11 never executed
    $$$$$:   62-block  5
call   12 never executed
    $$$$$:   62-block  6
     5172:   63:    key_num ++;
     5172:   64:    if( key > max_key) max_key = key;
branch  0 taken 3071 (fallthrough)
branch  1 taken 2101
     3071:   64-block  0
     5172:   65:    if( key < min_key) min_key = key;
     5172:   65-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 5168
        4:   65-block  1
     5172:   66:    Size += s.size() + 13; // 1 + 8 + 4: '\0' + key + offset
     5172:   66-block  0
call    0 returned 5172
     5172:   67:    next->point_list[0] = NewNode;
call    0 returned 5172
        -:   68:
        -:   69://    srand(time(nullptr));
     5172:   70:    int r = rand() % 1000;
call    0 returned 5172
     8155:   71:    while(r % 1000 < P){
     8155:   71-block  0
branch  0 taken 3003
branch  1 taken 5152 (fallthrough)
     3003:   72:        r = rand() % 1000;
     3003:   72-block  0
call    0 returned 3003
     3003:   73:        NewNode->level++;
     3003:   74:        if(NewNode->level > Max_level) {
branch  0 taken 20 (fallthrough)
branch  1 taken 2983
       20:   75:            Max_level++;
       20:   76:            head->point_list.push_back(NewNode);
       20:   76-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
       20:   77:            NewNode->point_list.push_back(tail);
       20:   77-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
       20:   78:            head->level++;
       20:   79:            tail->level++;
       20:   80:            break;
       20:   80-block  0
        -:   81:        }
        -:   82:        else {
     2983:   83:            NewNode->point_list.push_back( update_list[NewNode->level] -> point_list[NewNode->level] );
     2983:   83-block  0
call    0 returned 2983
call    1 returned 2983
branch  2 taken 2983 (fallthrough)
branch  3 taken 0 (throw)
     2983:   84:            update_list[NewNode->level] -> point_list[NewNode->level] = NewNode;
     2983:   84-block  0
call    0 returned 2983
        -:   85:        }
        -:   86:    }
     5172:   87:    delete []update_list;
     5172:   87-block  0
branch  0 taken 5172 (fallthrough)
branch  1 taken 0
     5172:   87-block  1
call    2 returned 5172
     5172:   88:    return true;
     5172:   88-block  0
        -:   89:}
        -:   90:
function _ZN8SkipList6searchB5cxx11Ey called 11767 returned 100% blocks executed 89%
    11767:   91:std::string SkipList::search(uint64_t key) {
    11767:   92:    int curr_level = Max_level;
    11767:   93:    node* next = head;
        -:   94:
   172910:   95:    while(curr_level >= 0) {
    11767:   95-block  0
   172910:   95-block  1
branch  0 taken 165835
branch  1 taken 7075 (fallthrough)
   165835:   96:        if( key == next->point_list[curr_level]->key)
   165835:   96-block  0
call    0 returned 165835
branch  1 taken 4692 (fallthrough)
branch  2 taken 161143
     4692:   97:            return next->point_list[curr_level]->s;
     4692:   97-block  0
call    0 returned 4692
call    1 returned 4692
        -:   98:
   161143:   99:        if( key < next->point_list[curr_level]->key)
   161143:   99-block  0
call    0 returned 161143
branch  1 taken 67203 (fallthrough)
branch  2 taken 93940
    67203:  100:            curr_level--;
    67203:  100-block  0
        -:  101:        else
    93940:  102:            next = next->point_list[curr_level];
    93940:  102-block  0
call    0 returned 93940
        -:  103:    }
        -:  104:
     7075:  105:    return "";
     7075:  105-block  0
call    0 returned 7075
call    1 returned 7075
branch  2 taken 7075 (fallthrough)
branch  3 taken 0 (throw)
     7075:  105-block  1
call    4 returned 7075
    $$$$$:  105-block  2
call    5 never executed
        -:  106:}
        -:  107:
function _ZN8SkipList4scanEyyRNSt7__cxx114listISt4pairIyNS0_12basic_stringIcSt11char_traitsIcESaIcEEEESaIS8_EEE called 0 returned 0% blocks executed 0%
    #####:  108:bool SkipList::scan(uint64_t key1, uint64_t key2, list<std::pair<uint64_t, std::string>> &list) {
    #####:  109:    if(key1 > max_key || key2 < min_key) return false;
    %%%%%:  109-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  109-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  109-block  2
    #####:  110:    for(int i = key1; i <= key2; ++i) {
    %%%%%:  110-block  0
    %%%%%:  110-block  1
branch  0 never executed
branch  1 never executed
    #####:  111:        string tmp = search(i);
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  112:        if( ! tmp.empty())
    %%%%%:  112-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  113:            list.emplace_back(std::make_pair(i, tmp));
    %%%%%:  113-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  113-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  113-block  2
call    6 never executed
    $$$$$:  113-block  3
call    7 never executed
    $$$$$:  113-block  4
    #####:  114:    }
    %%%%%:  114-block  0
call    0 never executed
    $$$$$:  114-block  1
call    1 never executed
    #####:  115:    return true;
    %%%%%:  115-block  0
        -:  116:}
        -:  117:
        -:  118:
        -:  119://int SkipList::del(uint64_t key) {
        -:  120://    return false;
        -:  121://}
        -:  122:
