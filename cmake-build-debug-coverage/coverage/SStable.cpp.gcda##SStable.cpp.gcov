        -:    0:Source:E:/CppProject/dataStruct2023/LSMkv/src/SStable.cpp
        -:    0:Graph:E:\CppProject\dataStruct2023\LSMkv\cmake-build-debug-coverage\CMakeFiles\LSMkv_persist.dir\src\SStable.cpp.gcno
        -:    0:Data:E:\CppProject\dataStruct2023\LSMkv\cmake-build-debug-coverage\CMakeFiles\LSMkv_persist.dir\src\SStable.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "../header/SSTable.h"
        -:    2:#include "iostream"
        -:    3://SSTable
        -:    4:
function _ZN7SSTableC2EP8SkipListy called 3 returned 100% blocks executed 85%
        3:    5:SSTable::SSTable(SkipList *skip_list, const uint64_t time_stamp) {
        3:    5-block  0
call    0 returned 3
call    1 returned 3
        -:    6:    // create buff_table_global_info
        3:    7:    bloom_filter = new BloomFilter();
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:    7-block  0
call    3 returned 3
        3:    8:    header = new Header(time_stamp,
        3:    9:                        skip_list->get_key_num(),
call    0 returned 3
        3:   10:                        skip_list->get_max_key(),
call    0 returned 3
        3:   11:                        skip_list->get_min_key());
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:   11-block  0
call    4 returned 3
        3:   12:    uint32_t offset = 32 + 10240 + header->total_num * 12; // 32: header size, 10240: bloom_filter size, 12 = 8+4: index_area size
        3:   13:    node* curr = skip_list->get_head()->point_list[0];
call    0 returned 3
call    1 returned 3
        3:   14:    node* tail = skip_list->get_tail();
call    0 returned 3
     5175:   15:    while (curr != tail) {
     5175:   15-block  0
branch  0 taken 5172
branch  1 taken 3 (fallthrough)
     5172:   16:        Indexer indexer(curr->key, offset);
     5172:   16-block  0
call    0 returned 5172
     5172:   17:        index_area.emplace_back(indexer);
call    0 returned 5172
branch  1 taken 5172 (fallthrough)
branch  2 taken 0 (throw)
     5172:   18:        bloom_filter->insert(curr->key);
     5172:   18-block  0
call    0 returned 5172
     5172:   19:        data_area.emplace_back(curr->s);
call    0 returned 5172
branch  1 taken 5172 (fallthrough)
branch  2 taken 0 (throw)
     5172:   20:        offset += curr->s.size();
     5172:   20-block  0
call    0 returned 5172
     5172:   21:        curr = curr->point_list[0];
call    0 returned 5172
        -:   22:    }
        3:   23:}
        3:   23-block  0
    $$$$$:   23-block  1
call    0 never executed
    $$$$$:   23-block  2
call    1 never executed
        -:   24:
function _ZN7SSTableC2ERKSt6vectorISt4pairIyNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS8_EEy called 0 returned 0% blocks executed 0%
    #####:   25:SSTable::SSTable(const vector<pair<uint64_t,string>>& data, const uint64_t time_stamp) {
    %%%%%:   25-block  0
call    0 never executed
call    1 never executed
    #####:   26:    bloom_filter = new BloomFilter();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   26-block  0
call    3 never executed
    #####:   27:    uint64_t key_num = data.size(), max_key = data[key_num - 1].first, min_key = data[0].first;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   28:    header = new Header(time_stamp, key_num, max_key, min_key);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   28-block  0
call    3 never executed
    #####:   29:    uint32_t offset = 32 + 10240 + header->total_num * 12; // 32: header size, 10240: bloom_filter size, 12 = 8+4: index_area size
    #####:   30:    for (auto iter : data) {
call    0 never executed
call    1 never executed
    %%%%%:   30-block  0
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    %%%%%:   30-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####:   31:        Indexer indexer(iter.first, offset);
    %%%%%:   31-block  0
call    0 never executed
    #####:   32:        index_area.emplace_back(indexer);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   33:        bloom_filter->insert(iter.first);
    %%%%%:   33-block  0
call    0 never executed
    #####:   34:        data_area.emplace_back(iter.second);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   35:        offset += iter.second.size();
    %%%%%:   35-block  0
call    0 never executed
    #####:   36:    }
call    0 never executed
    $$$$$:   36-block  0
call    1 never executed
    #####:   37:}
    %%%%%:   37-block  0
    $$$$$:   37-block  1
call    0 never executed
    $$$$$:   37-block  2
call    1 never executed
        -:   38:
function _ZN7SSTableD2Ev called 0 returned 0% blocks executed 0%
    #####:   39:SSTable::~SSTable() {
    #####:   40:    delete header;
    %%%%%:   40-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   40-block  1
call    2 never executed
call    3 never executed
    #####:   41:    delete bloom_filter;
    %%%%%:   41-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   41-block  1
call    2 never executed
call    3 never executed
    #####:   42:};
    %%%%%:   42-block  0
call    0 never executed
call    1 never executed
function _ZN7SSTableC2Ev called 0 returned 0% blocks executed 0%
    #####:   43:SSTable::SSTable() {
    %%%%%:   43-block  0
call    0 never executed
call    1 never executed
    #####:   44:    header = nullptr;
    #####:   45:    bloom_filter = nullptr;
    #####:   46:}
        -:   47:
function _ZN7SSTable9save_fileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 3 returned 100% blocks executed 78%
        3:   48:void SSTable::save_file(const string &file_name) {
        3:   49:    ofstream out(file_name, ios::binary | ios::out);
        3:   49-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:   50:    if (!out.is_open()) {
        3:   50-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   50-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 3
    #####:   51:        cout << "open file error: "<<file_name << endl;
    %%%%%:   51-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   51-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:   51-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:   52:        return;
    %%%%%:   52-block  0
        -:   53:    }
        -:   54:
        -:   55:    // write header
        3:   56:    out.write((char*)(&header->time_stamp), 8);
        3:   56-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   57:    out.write((char*)(&header->total_num), 8);
        3:   57-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   58:    out.write((char*)(&header->min_key), 8);
        3:   58-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   59:    out.write((char*)(&header->max_key), 8);
        3:   59-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -:   60:
        -:   61:    // write bloom_filter
        3:   62:    std::bitset<BLOOM_SIZE> filter;
        3:   63:    bloom_filter->getBit(filter);
        3:   63-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   64:    out.write((char *)(&filter), sizeof(filter));
        3:   64-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -:   65:
        -:   66:    // write index_area
     5175:   67:    for(auto iter : index_area) {
        3:   67-block  0
call    0 returned 3
call    1 returned 3
     5172:   67-block  1
call    2 returned 5172
     5172:   67-block  2
call    3 returned 5172
     5175:   67-block  3
call    4 returned 5175
branch  5 taken 5172
branch  6 taken 3 (fallthrough)
     5172:   68:        out.write((char*)&iter.key, 8);
call    0 returned 5172
branch  1 taken 5172 (fallthrough)
branch  2 taken 0 (throw)
     5172:   69:        out.write((char*)&iter.offset, 4);
     5172:   69-block  0
call    0 returned 5172
branch  1 taken 5172 (fallthrough)
branch  2 taken 0 (throw)
        -:   70:    }
        -:   71:    // write data_area
     5175:   72:    for (auto iter : data_area) {
        3:   72-block  0
call    0 returned 3
call    1 returned 3
     5172:   72-block  1
call    2 returned 5172
call    3 returned 5172
branch  4 taken 5172 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 5172
     5175:   72-block  2
call    7 returned 5175
branch  8 taken 5172
branch  9 taken 3 (fallthrough)
     5172:   73:        out.write(iter.c_str(), (long long)iter.size());
     5172:   73-block  0
call    0 returned 5172
call    1 returned 5172
call    2 returned 5172
branch  3 taken 5172 (fallthrough)
branch  4 taken 0 (throw)
     5172:   74:    }
     5172:   74-block  0
call    0 returned 5172
    $$$$$:   74-block  1
call    1 never executed
        3:   75:    out.close();
        3:   75-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -:   76:
        3:   77:    vector<string>().swap(data_area); //释放data_area的内存
        3:   77-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
        3:   78:}
        3:   78-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0
    $$$$$:   78-block  1
call    3 never executed
        -:   79:
function _ZN7SSTable3getEyRjRi called 5637 returned 100% blocks executed 85%
     5637:   80:bool SSTable::get(const uint64_t key, uint32_t & offset, int & size) {
        -:   81:    // 现在BloomFilter中查找,如果没有，就一定没有
     5637:   82:    if ( ! bloom_filter->find(key))
     5637:   82-block  0
call    0 returned 5637
branch  1 taken 0 (fallthrough)
branch  2 taken 5637
    #####:   83:        return false;
    %%%%%:   83-block  0
        -:   84:
        -:   85:    // 在index_area中二分查找，可能没有
     5637:   86:    int index = binary_search(key);
     5637:   86-block  0
call    0 returned 5637
     5637:   87:    if(index < 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 5637
    #####:   88:        return false;
    %%%%%:   88-block  0
        -:   89:
        -:   90:    // 在data_area文件中查找
     5637:   91:    offset = index_area[index].offset;
     5637:   91-block  0
call    0 returned 5637
     5637:   92:    size = -1;
     5637:   93:    if((index + 1) < index_area.size()) // 如果是最后一个元素，len=-1
call    0 returned 5637
branch  1 taken 5633 (fallthrough)
branch  2 taken 4
     5633:   94:        size = index_area[index + 1].offset - offset;
     5633:   94-block  0
call    0 returned 5633
        -:   95:
     5637:   96:    return true;
     5637:   96-block  0
        -:   97:}
        -:   98:
function _ZNK7SSTable13binary_searchEy called 5637 returned 100% blocks executed 92%
     5637:   99:int SSTable::binary_search(const uint64_t key) const {
     5637:  100:    int left = 0;
     5637:  101:    int right = index_area.size() - 1;
     5637:  101-block  0
call    0 returned 5637
        -:  102:
    54467:  103:    while (left <= right) {
    54467:  103-block  0
branch  0 taken 54467
branch  1 taken 0 (fallthrough)
    54467:  104:        int mid = left + (right - left) / 2;
        -:  105:
    54467:  106:        if (index_area[mid].key == key) {
    54467:  106-block  0
call    0 returned 54467
branch  1 taken 5637 (fallthrough)
branch  2 taken 48830
     5637:  107:            return mid; // 找到了指定的 key 值，返回下标
     5637:  107-block  0
    48830:  108:        } else if (index_area[mid].key < key) {
    48830:  108-block  0
call    0 returned 48830
branch  1 taken 24723 (fallthrough)
branch  2 taken 24107
    24723:  109:            left = mid + 1; // 在右半部分继续查找
    24723:  109-block  0
        -:  110:        } else {
    24107:  111:            right = mid - 1; // 在左半部分继续查找
    24107:  111-block  0
        -:  112:        }
        -:  113:    }
        -:  114:
    #####:  115:    return -1; // 没有找到指定的 key 值
    %%%%%:  115-block  0
        -:  116:}
        -:  117:
function _ZN7SSTableC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEyy called 0 returned 0% blocks executed 0%
    #####:  118:SSTable::SSTable(const string &file_path, uint64_t time_stamp,uint64_t serial) {
    %%%%%:  118-block  0
call    0 never executed
call    1 never executed
    #####:  119:    ifstream in(file_path, ios::binary | ios::in);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  120:    if (!in.is_open()) {
    %%%%%:  120-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  120-block  1
branch  3 never executed
branch  4 never executed
    #####:  121:        cout << "open file error: "<<file_path << endl;
    %%%%%:  121-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  121-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  121-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  122:        return;
    %%%%%:  122-block  0
        -:  123:    }
        -:  124:    // read header
    #####:  125:    header = new Header();
    %%%%%:  125-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  125-block  1
call    3 never executed
    #####:  126:    in.read((char*)&header->time_stamp, 8);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  127:    in.read((char*)&header->total_num, 8);
    %%%%%:  127-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  128:    in.read((char*)&header->min_key, 8);
    %%%%%:  128-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  129:    in.read((char*)&header->max_key, 8);
    %%%%%:  129-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  130:
        -:  131:    // read bloom_filter
    #####:  132:    bitset<BLOOM_SIZE> filter;
    #####:  133:    in.read((char *)(&filter), sizeof(filter));
    %%%%%:  133-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  134:    bloom_filter = new BloomFilter(filter);
    %%%%%:  134-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  134-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  134-block  2
call    6 never executed
        -:  135:
        -:  136:    // read index_area
    #####:  137:    for (int i = 0; i < header->total_num; ++i) {
    %%%%%:  137-block  0
    %%%%%:  137-block  1
    %%%%%:  137-block  2
branch  0 never executed
branch  1 never executed
    #####:  138:        Indexer indexer;
    %%%%%:  138-block  0
call    0 never executed
    #####:  139:        in.read((char*)&indexer.key, 8);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  140:        in.read((char*)&indexer.offset, 4);
    %%%%%:  140-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  141:        index_area.emplace_back(indexer);
    %%%%%:  141-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  142:    }
        -:  143:
    #####:  144:    in.close();
    %%%%%:  144-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  145:    header->time_stamp = time_stamp;
    #####:  146:    Serial = serial;
    #####:  147:}
    %%%%%:  147-block  0
    %%%%%:  147-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  147-block  2
call    3 never executed
    $$$$$:  147-block  3
call    4 never executed
    $$$$$:  147-block  4
call    5 never executed
        -:  148:/*
        -:  149: * @brief:将SSTable中的数据区读取到内存中
        -:  150: * @param:file_path:文件路径
        -:  151: * @param:返回一个包含键值对的vector:data
        -:  152: * @param:is_end:是否是最后一行，最后一行需要删除所有的~DELETE~标记
        -:  153: * */
function _ZN7SSTable11read_to_memERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERSt6vectorISt4pairIyS5_ESaISA_EE called 3 returned 100% blocks executed 64%
        3:  154:void SSTable::read_to_mem(const string &file_path,vector< pair<uint64_t, string> > &data) {
        3:  155:    ifstream in(file_path, ios::binary | ios::in);
        3:  155-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:  156:     if (!in.is_open()) {
        3:  156-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  156-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 3
    #####:  157:        cout << "SSTable::read_to_mem::open file error: "<<file_path << endl;
    %%%%%:  157-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  157-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  157-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  158:        return;
    %%%%%:  158-block  0
        -:  159:    }
        3:  160:    in.seekg(index_area[0].offset, ios::beg);
        3:  160-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        -:  161:    uint32_t len;
        -:  162:
     5172:  163:    for (int i = 0; i < header->total_num - 1; ++i) {
        3:  163-block  0
     5172:  163-block  1
branch  0 taken 5169
branch  1 taken 3 (fallthrough)
     5169:  164:        len = index_area[i + 1].offset - index_area[i].offset;
     5169:  164-block  0
call    0 returned 5169
call    1 returned 5169
     5169:  165:        string ans(len, ' ');
call    0 returned 5169
call    1 returned 5169
branch  2 taken 5169 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:  165-block  0
     5169:  166:        in.read(&(*ans.begin()), sizeof(char) * len);
call    0 returned 5169
call    1 returned 5169
call    2 returned 5169
branch  3 taken 5169 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$:  166-block  0
     5169:  167:        ans[len] = '\0';
     5169:  167-block  0
call    0 returned 5169
branch  1 taken 5169 (fallthrough)
branch  2 taken 0 (throw)
        -:  168://        if(!is_end || strcasecmp(ans.c_str(), "~DELETE~") != 0)
     5169:  169:            data.emplace_back(make_pair(index_area[i].key, ans));
     5169:  169-block  0
call    0 returned 5169
call    1 returned 5169
branch  2 taken 5169 (fallthrough)
branch  3 taken 0 (throw)
     5169:  169-block  1
call    4 returned 5169
branch  5 taken 5169 (fallthrough)
branch  6 taken 0 (throw)
     5169:  169-block  2
call    7 returned 5169
    $$$$$:  169-block  3
call    8 never executed
    $$$$$:  169-block  4
     5169:  170:    }
call    0 returned 5169
    $$$$$:  170-block  0
call    1 never executed
        3:  171:    streampos start = in.tellg(); //获取当前位置
        3:  171-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  172:    in.seekg(0, ios::end); //定位到文件末尾
        3:  172-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  173:    streampos end = in.tellg(); //获取当前位置
        3:  173-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  174:    in.seekg(start); // 重新定位文件指针到起始位置
        3:  174-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  175:    len = end - start;
        3:  175-block  0
call    0 returned 3
        3:  176:    string ans(len, ' ');
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:  176-block  0
        3:  177:    in.read(&(*ans.begin()), sizeof(char) * len);
call    0 returned 3
call    1 returned 3
call    2 returned 3
branch  3 taken 3 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$:  177-block  0
        3:  178:    ans[len] = '\0';
        3:  178-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -:  179://    if(!is_end || strcasecmp(ans.c_str(), "~DELETE~") != 0)
        3:  180:        data.emplace_back(make_pair(index_area[header->total_num - 1].key, ans));
        3:  180-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:  180-block  1
call    4 returned 3
branch  5 taken 3 (fallthrough)
branch  6 taken 0 (throw)
        3:  180-block  2
call    7 returned 3
    $$$$$:  180-block  3
call    8 never executed
    $$$$$:  180-block  4
        3:  181:}
call    0 returned 3
        3:  181-block  0
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0
    $$$$$:  181-block  1
call    4 never executed
    $$$$$:  181-block  2
call    5 never executed
        -:  182:
        -:  183:
        -:  184:
