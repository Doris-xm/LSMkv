        -:    0:Source:E:/CppProject/dataStruct2023/LSMkv/utils.h
        -:    0:Graph:E:\CppProject\dataStruct2023\LSMkv\cmake-build-debug-coverage\CMakeFiles\LSMkv_correct.dir\src\Disk_store.cpp.gcno
        -:    0:Data:E:\CppProject\dataStruct2023\LSMkv\cmake-build-debug-coverage\CMakeFiles\LSMkv_correct.dir\src\Disk_store.cpp.gcda
        -:    0:Runs:1
        -:    1:#pragma once
        -:    2:
        -:    3:#include <sstream>
        -:    4:#include <sys/stat.h>
        -:    5:#include <vector>
        -:    6:#include <sys/types.h>
        -:    7:
        -:    8:#ifdef _WIN32
        -:    9:#include <direct.h>
        -:   10:#include <stdio.h>
        -:   11:#include <io.h>
        -:   12:#include <windows.h>
        -:   13:#endif
        -:   14:#if defined(__linux__) || defined(__MINGW32__) || defined(__APPLE__)
        -:   15:#include <dirent.h>
        -:   16:#include <unistd.h>
        -:   17:#include <cstring>
        -:   18:#endif
        -:   19:
        -:   20:namespace utils{
        -:   21:    /**
        -:   22:     * Check whether directory exists
        -:   23:     * @param path directory to be checked.
        -:   24:     * @return ture if directory exists, false otherwise.
        -:   25:     */
function _ZN5utilsL9dirExistsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 20 returned 100% blocks executed 100%
       20:   26:    static inline bool dirExists(std::string path){
        -:   27:        struct stat st;
       20:   28:        int ret = stat(path.c_str(), &st);
       20:   28-block  0
call    0 returned 20
call    1 returned 20
branch  2 taken 20 (fallthrough)
branch  3 taken 0 (throw)
       20:   29:        return ret == 0 && st.st_mode & S_IFDIR;
       20:   29-block  0
branch  0 taken 14 (fallthrough)
branch  1 taken 6
       14:   29-block  1
branch  2 taken 14 (fallthrough)
branch  3 taken 0
       14:   29-block  2
        6:   29-block  3
       20:   29-block  4
       20:   29-block  5
        -:   30:    }
        -:   31:
        -:   32:    /**
        -:   33:     * list all filename in a directory
        -:   34:     * @param path directory path.
        -:   35:     * @param ret all files name in directory.
        -:   36:     * @return files number.
        -:   37:     */
        -:   38:#if defined(_WIN32) && !defined(__MINGW32__)
        -:   39:    static inline int scanDir(std::string path, std::vector<std::string> &ret){
        -:   40:        std::string extendPath;
        -:   41:        if(path[path.size() - 1] == '/'){
        -:   42:            extendPath = path + "*";
        -:   43:        }
        -:   44:        else{
        -:   45:            extendPath = path + "/*";
        -:   46:        }
        -:   47:        WIN32_FIND_DATAA fd;
        -:   48:        HANDLE h = FindFirstFileA(extendPath.c_str(), &fd);
        -:   49:        if(h == INVALID_HANDLE_VALUE){
        -:   50:            return 0;
        -:   51:        }
        -:   52:        while(true){
        -:   53:            std::string ss(fd.cFileName);
        -:   54:            if(ss[0] != '.'){
        -:   55:                ret.push_back(ss);
        -:   56:            }
        -:   57:            if(FindNextFile(h, &fd) ==false){
        -:   58:                break;
        -:   59:            }
        -:   60:        }
        -:   61:        FindClose(h);
        -:   62:        return ret.size();
        -:   63:    }
        -:   64:#endif
        -:   65:#if defined(__linux__) || defined(__MINGW32__) || defined(__APPLE__)
        -:   66:    static inline int scanDir(std::string path, std::vector<std::string> &ret){
        -:   67:        DIR *dir;
        -:   68:        struct dirent *rent;
        -:   69:        dir = opendir(path.c_str());
        -:   70:        char s[100];
        -:   71:        while((rent = readdir(dir))){
        -:   72:            strcpy(s,rent->d_name);
        -:   73:            if (s[0] != '.'){
        -:   74:                ret.push_back(s);
        -:   75:            }
        -:   76:        }
        -:   77:        closedir(dir);
        -:   78:        return ret.size();
        -:   79:    }
        -:   80:#endif
        -:   81:
        -:   82:    /**
        -:   83:     * Create directory
        -:   84:     * @param path directory to be created.
        -:   85:     * @return 0 if directory is created successfully, -1 otherwise.
        -:   86:     */
function _ZN5utilsL6_mkdirEPKc called 3 returned 100% blocks executed 100%
        3:   87:    static inline int _mkdir(const char *path){
        -:   88:#ifdef _WIN32
        3:   89:        return ::_mkdir(path);
        3:   89-block  0
call    0 returned 3
        -:   90:#else
        -:   91:        return ::mkdir(path, 0775);
        -:   92:#endif
        -:   93:    }
        -:   94:
        -:   95:    /**
        -:   96:     * Create directory recursively
        -:   97:     * @param path directory to be created.
        -:   98:     * @return 0 if directory is created successfully, -1 otherwise.
        -:   99:     */
function _ZN5utilsL5mkdirEPKc called 3 returned 100% blocks executed 61%
        3:  100:    static inline int mkdir(const char *path){
        3:  101:        std::string currentPath = "";
        3:  101-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:  101-block  1
        3:  102:        std::string dirName;
call    0 returned 3
        6:  103:        std::stringstream ss(path);
call    0 returned 3
call    1 returned 3
call    2 returned 3
branch  3 taken 3 (fallthrough)
branch  4 taken 0 (throw)
        3:  103-block  0
call    5 returned 3
branch  6 taken 3 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 3
    $$$$$:  103-block  1
    $$$$$:  103-block  2
        -:  104:
       12:  105:        while (std::getline(ss, dirName, '/')){
       12:  105-block  0
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
       12:  105-block  1
call    3 returned 12
branch  4 taken 12 (fallthrough)
branch  5 taken 0 (throw)
       12:  105-block  2
branch  6 taken 9
branch  7 taken 3 (fallthrough)
        9:  106:            currentPath += dirName;
        9:  106-block  0
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
       9*:  107:            if (!dirExists(currentPath) && _mkdir(currentPath.c_str()) != 0){
        9:  107-block  0
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
        9:  107-block  1
call    3 returned 9
branch  4 taken 9 (fallthrough)
branch  5 taken 0 (throw)
        9:  107-block  2
branch  6 taken 3 (fallthrough)
branch  7 taken 6
        3:  107-block  3
call    8 returned 3
call    9 returned 3
branch 10 taken 3 (fallthrough)
branch 11 taken 0 (throw)
        3:  107-block  4
branch 12 taken 0 (fallthrough)
branch 13 taken 3
    %%%%%:  107-block  5
        9:  107-block  6
        9:  107-block  7
branch 14 taken 9 (fallthrough)
branch 15 taken 0
        9:  107-block  8
call   16 returned 9
        9:  107-block  9
branch 17 taken 0 (fallthrough)
branch 18 taken 9
    $$$$$:  107-block 10
branch 19 never executed
branch 20 never executed
    $$$$$:  107-block 11
call   21 never executed
    $$$$$:  107-block 12
    #####:  108:                return -1;
    %%%%%:  108-block  0
        -:  109:            }
        9:  110:            currentPath += "/";
        9:  110-block  0
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
        -:  111:        }
        3:  112:        return 0;
        3:  112-block  0
        3:  113:    }
        3:  113-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
    $$$$$:  113-block  1
call    3 never executed
    $$$$$:  113-block  2
call    4 never executed
    $$$$$:  113-block  3
call    5 never executed
        -:  114:
        -:  115:    /**
        -:  116:     * Delete a empty directory
        -:  117:     * @param path directory to be deleted.
        -:  118:     * @return 0 if delete successfully, -1 otherwise.
        -:  119:     */
        -:  120:    static inline int rmdir(const char *path){
        -:  121:#ifdef _WIN32
        -:  122:        return ::_rmdir(path);
        -:  123:#else
        -:  124:        return ::rmdir(path);
        -:  125:#endif
        -:  126:    }
        -:  127:
        -:  128:    /**
        -:  129:     * Delete a file
        -:  130:     * @param path file to be deleted.
        -:  131:     * @return 0 if delete successfully, -1 otherwise.
        -:  132:     */
function _ZN5utilsL6rmfileEPKc called 38 returned 100% blocks executed 100%
       38:  133:    static inline int rmfile(const char *path){
        -:  134:#ifdef _WIN32
       38:  135:        return ::_unlink(path);
       38:  135-block  0
call    0 returned 38
        -:  136:#else
        -:  137:        return ::unlink(path);
        -:  138:#endif
        -:  139:    }
        -:  140:
        -:  141:
        -:  142:
        -:  143:}
