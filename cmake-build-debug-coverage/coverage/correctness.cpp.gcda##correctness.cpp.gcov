        -:    0:Source:E:/CppProject/dataStruct2023/LSMkv/test/correctness.cpp
        -:    0:Graph:E:\CppProject\dataStruct2023\LSMkv\cmake-build-debug-coverage\CMakeFiles\LSMkv_correct.dir\test\correctness.cpp.gcno
        -:    0:Data:E:\CppProject\dataStruct2023\LSMkv\cmake-build-debug-coverage\CMakeFiles\LSMkv_correct.dir\test\correctness.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <iostream>
        -:    2:#include <cstdint>
        -:    3:#include <string>
        -:    4:
        -:    5:#include "test.h"
        -:    6:
        -:    7:class CorrectnessTest : public Test {
        -:    8:private:
        -:    9:    const uint64_t SIMPLE_TEST_MAX = 512;
        -:   10:    const uint64_t LARGE_TEST_MAX = 1024 * 8; // 1024 * 64;
        -:   11:
function _ZN15CorrectnessTest12regular_testEy called 2 returned 100% blocks executed 51%
        2:   12:    void regular_test(uint64_t max)
        -:   13:    {
        -:   14:        uint64_t i;
        -:   15:
        -:   16:        // Test a single key
        2:   17:        EXPECT(not_found, store.get(1));
        2:   17-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:   17-block  1
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0 (throw)
        2:   17-block  2
call    7 returned 2
branch  8 taken 2 (fallthrough)
branch  9 taken 0 (throw)
        2:   17-block  3
call   10 returned 2
call   11 returned 2
call   12 returned 2
    $$$$$:   17-block  4
call   13 never executed
    $$$$$:   17-block  5
    $$$$$:   17-block  6
call   14 never executed
    $$$$$:   17-block  7
    $$$$$:   17-block  8
call   15 never executed
    $$$$$:   17-block  9
        2:   18:        store.put(1, "SE");
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:   18-block  0
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0 (throw)
        2:   18-block  1
call    7 returned 2
call    8 returned 2
    $$$$$:   18-block  2
call    9 never executed
    $$$$$:   18-block  3
    $$$$$:   18-block  4
call   10 never executed
    $$$$$:   18-block  5
        2:   19:        EXPECT("SE", store.get(1));
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:   19-block  0
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0 (throw)
        2:   19-block  1
call    7 returned 2
call    8 returned 2
branch  9 taken 2 (fallthrough)
branch 10 taken 0 (throw)
        2:   19-block  2
call   11 returned 2
branch 12 taken 2 (fallthrough)
branch 13 taken 0 (throw)
        2:   19-block  3
call   14 returned 2
call   15 returned 2
call   16 returned 2
call   17 returned 2
call   18 returned 2
    $$$$$:   19-block  4
call   19 never executed
    $$$$$:   19-block  5
    $$$$$:   19-block  6
call   20 never executed
    $$$$$:   19-block  7
    $$$$$:   19-block  8
call   21 never executed
    $$$$$:   19-block  9
    $$$$$:   19-block 10
call   22 never executed
    $$$$$:   19-block 11
    $$$$$:   19-block 12
call   23 never executed
    $$$$$:   19-block 13
        2:   20:        EXPECT(true, store.del(1));
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:   20-block  0
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0 (throw)
        2:   20-block  1
call    7 returned 2
branch  8 taken 2 (fallthrough)
branch  9 taken 0 (throw)
        2:   20-block  2
call   10 returned 2
call   11 returned 2
    $$$$$:   20-block  3
    $$$$$:   20-block  4
    $$$$$:   20-block  5
call   12 never executed
    $$$$$:   20-block  6
    $$$$$:   20-block  7
call   13 never executed
    $$$$$:   20-block  8
        2:   21:        EXPECT(not_found, store.get(1));
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:   21-block  0
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0 (throw)
        2:   21-block  1
call    7 returned 2
branch  8 taken 2 (fallthrough)
branch  9 taken 0 (throw)
        2:   21-block  2
call   10 returned 2
call   11 returned 2
call   12 returned 2
    $$$$$:   21-block  3
call   13 never executed
    $$$$$:   21-block  4
    $$$$$:   21-block  5
call   14 never executed
    $$$$$:   21-block  6
    $$$$$:   21-block  7
call   15 never executed
    $$$$$:   21-block  8
        2:   22:        EXPECT(false, store.del(1));
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:   22-block  0
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0 (throw)
        2:   22-block  1
call    7 returned 2
branch  8 taken 2 (fallthrough)
branch  9 taken 0 (throw)
        2:   22-block  2
call   10 returned 2
call   11 returned 2
    $$$$$:   22-block  3
    $$$$$:   22-block  4
    $$$$$:   22-block  5
call   12 never executed
    $$$$$:   22-block  6
    $$$$$:   22-block  7
call   13 never executed
    $$$$$:   22-block  8
        -:   23:
        2:   24:        phase();
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -:   25:
        -:   26:        // Test multiple key-value pairs
     8706:   27:        for (i = 0; i < max; ++i) {
        2:   27-block  0
     8706:   27-block  1
branch  0 taken 8704
branch  1 taken 2 (fallthrough)
     8704:   28:            store.put(i, std::string(i+1, 's'));
     8704:   28-block  0
call    0 returned 8704
call    1 returned 8704
branch  2 taken 8704 (fallthrough)
branch  3 taken 0 (throw)
     8704:   28-block  1
call    4 returned 8704
branch  5 taken 8704 (fallthrough)
branch  6 taken 0 (throw)
     8704:   28-block  2
call    7 returned 8704
call    8 returned 8704
    $$$$$:   28-block  3
call    9 never executed
    $$$$$:   28-block  4
    $$$$$:   28-block  5
call   10 never executed
    $$$$$:   28-block  6
     8704:   29:            EXPECT(std::string(i+1, 's'), store.get(i));
call    0 returned 8704
call    1 returned 8704
branch  2 taken 8704 (fallthrough)
branch  3 taken 0 (throw)
     8704:   29-block  0
call    4 returned 8704
branch  5 taken 8704 (fallthrough)
branch  6 taken 0 (throw)
     8704:   29-block  1
call    7 returned 8704
call    8 returned 8704
branch  9 taken 8704 (fallthrough)
branch 10 taken 0 (throw)
     8704:   29-block  2
call   11 returned 8704
branch 12 taken 8704 (fallthrough)
branch 13 taken 0 (throw)
     8704:   29-block  3
call   14 returned 8704
call   15 returned 8704
call   16 returned 8704
call   17 returned 8704
call   18 returned 8704
    $$$$$:   29-block  4
call   19 never executed
    $$$$$:   29-block  5
    $$$$$:   29-block  6
call   20 never executed
    $$$$$:   29-block  7
    $$$$$:   29-block  8
call   21 never executed
    $$$$$:   29-block  9
    $$$$$:   29-block 10
call   22 never executed
    $$$$$:   29-block 11
    $$$$$:   29-block 12
call   23 never executed
    $$$$$:   29-block 13
        -:   30:        }
        2:   31:        phase();
        2:   31-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -:   32:
        -:   33:        // Test after all insertions
     8706:   34:        for (i = 0; i < max; ++i)
        2:   34-block  0
     8706:   34-block  1
branch  0 taken 8704
branch  1 taken 2 (fallthrough)
     8704:   35:            EXPECT(std::string(i+1, 's'), store.get(i));
     8704:   35-block  0
call    0 returned 8704
call    1 returned 8704
branch  2 taken 8704 (fallthrough)
branch  3 taken 0 (throw)
     8704:   35-block  1
call    4 returned 8704
branch  5 taken 8704 (fallthrough)
branch  6 taken 0 (throw)
     8704:   35-block  2
call    7 returned 8704
call    8 returned 8704
branch  9 taken 8704 (fallthrough)
branch 10 taken 0 (throw)
     8704:   35-block  3
call   11 returned 8704
branch 12 taken 8704 (fallthrough)
branch 13 taken 0 (throw)
     8704:   35-block  4
call   14 returned 8704
call   15 returned 8704
call   16 returned 8704
call   17 returned 8704
call   18 returned 8704
    $$$$$:   35-block  5
call   19 never executed
    $$$$$:   35-block  6
    $$$$$:   35-block  7
call   20 never executed
    $$$$$:   35-block  8
    $$$$$:   35-block  9
call   21 never executed
    $$$$$:   35-block 10
    $$$$$:   35-block 11
call   22 never executed
    $$$$$:   35-block 12
    $$$$$:   35-block 13
call   23 never executed
    $$$$$:   35-block 14
        2:   36:        phase();
        2:   36-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -:   37:
        -:   38:        // Test scan
        2:   39:        std::list<std::pair<uint64_t, std::string> > list_ans;
        2:   39-block  0
call    0 returned 2
        2:   40:        std::list<std::pair<uint64_t, std::string> > list_stu;
call    0 returned 2
        -:   41:
     4354:   42:        for (i = 0; i < max / 2; ++i) {
     4354:   42-block  0
branch  0 taken 4352
branch  1 taken 2 (fallthrough)
     4352:   43:            list_ans.emplace_back(std::make_pair(i, std::string(i+1, 's')));
     4352:   43-block  0
call    0 returned 4352
call    1 returned 4352
branch  2 taken 4352 (fallthrough)
branch  3 taken 0 (throw)
     4352:   43-block  1
call    4 returned 4352
branch  5 taken 4352 (fallthrough)
branch  6 taken 0 (throw)
     4352:   43-block  2
call    7 returned 4352
branch  8 taken 4352 (fallthrough)
branch  9 taken 0 (throw)
     4352:   43-block  3
call   10 returned 4352
call   11 returned 4352
call   12 returned 4352
    $$$$$:   43-block  4
call   13 never executed
    $$$$$:   43-block  5
    $$$$$:   43-block  6
call   14 never executed
    $$$$$:   43-block  7
    $$$$$:   43-block  8
call   15 never executed
    $$$$$:   43-block  9
        -:   44:        }
        -:   45:
        2:   46:        store.scan(0, max / 2 - 1, list_stu);
        2:   46-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   47:        EXPECT(list_ans.size(), list_stu.size());
        2:   47-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:   47-block  1
call    4 returned 2
call    5 returned 2
call    6 returned 2
branch  7 taken 2 (fallthrough)
branch  8 taken 0 (throw)
        2:   47-block  2
call    9 returned 2
call   10 returned 2
    $$$$$:   47-block  3
    $$$$$:   47-block  4
    $$$$$:   47-block  5
call   11 never executed
    $$$$$:   47-block  6
    $$$$$:   47-block  7
call   12 never executed
    $$$$$:   47-block  8
        -:   48:
        2:   49:        auto ap = list_ans.begin();
call    0 returned 2
        2:   50:        auto sp = list_stu.begin();
call    0 returned 2
     4354:   51:        while(ap != list_ans.end()) {
     4354:   51-block  0
call    0 returned 4354
call    1 returned 4354
branch  2 taken 4352
branch  3 taken 2 (fallthrough)
     4352:   52:            if (sp == list_stu.end()) {
     4352:   52-block  0
call    0 returned 4352
call    1 returned 4352
branch  2 taken 4096 (fallthrough)
branch  3 taken 256
     4096:   53:                EXPECT((*ap).first, -1);
     4096:   53-block  0
call    0 returned 4096
call    1 returned 4096
branch  2 taken 4096 (fallthrough)
branch  3 taken 0 (throw)
     4096:   53-block  1
call    4 returned 4096
call    5 returned 4096
branch  6 taken 4096 (fallthrough)
branch  7 taken 0 (throw)
     4096:   53-block  2
call    8 returned 4096
call    9 returned 4096
    $$$$$:   53-block  3
    $$$$$:   53-block  4
    $$$$$:   53-block  5
call   10 never executed
    $$$$$:   53-block  6
    $$$$$:   53-block  7
call   11 never executed
    $$$$$:   53-block  8
     4096:   54:                EXPECT((*ap).second, not_found);
call    0 returned 4096
call    1 returned 4096
branch  2 taken 4096 (fallthrough)
branch  3 taken 0 (throw)
     4096:   54-block  0
call    4 returned 4096
call    5 returned 4096
branch  6 taken 4096 (fallthrough)
branch  7 taken 0 (throw)
     4096:   54-block  1
call    8 returned 4096
call    9 returned 4096
    $$$$$:   54-block  2
call   10 never executed
    $$$$$:   54-block  3
    $$$$$:   54-block  4
call   11 never executed
    $$$$$:   54-block  5
     4096:   55:                ap++;
call    0 returned 4096
        -:   56:            }
        -:   57:            else {
      256:   58:                EXPECT((*ap).first, (*sp).first);
      256:   58-block  0
call    0 returned 256
call    1 returned 256
branch  2 taken 256 (fallthrough)
branch  3 taken 0 (throw)
      256:   58-block  1
call    4 returned 256
call    5 returned 256
call    6 returned 256
branch  7 taken 256 (fallthrough)
branch  8 taken 0 (throw)
      256:   58-block  2
call    9 returned 256
call   10 returned 256
    $$$$$:   58-block  3
call   11 never executed
    $$$$$:   58-block  4
    $$$$$:   58-block  5
call   12 never executed
    $$$$$:   58-block  6
      256:   59:                EXPECT((*ap).second, (*sp).second);
call    0 returned 256
call    1 returned 256
branch  2 taken 256 (fallthrough)
branch  3 taken 0 (throw)
      256:   59-block  0
call    4 returned 256
call    5 returned 256
call    6 returned 256
branch  7 taken 256 (fallthrough)
branch  8 taken 0 (throw)
      256:   59-block  1
call    9 returned 256
call   10 returned 256
    $$$$$:   59-block  2
call   11 never executed
    $$$$$:   59-block  3
    $$$$$:   59-block  4
call   12 never executed
    $$$$$:   59-block  5
      256:   60:                ap++;
call    0 returned 256
      256:   61:                sp++;
call    0 returned 256
        -:   62:            }
        -:   63:        }
        -:   64:
        2:   65:        phase();
        2:   65-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -:   66:
        -:   67:        // Test deletions
     4354:   68:        for (i = 0; i < max; i+=2)
        2:   68-block  0
     4354:   68-block  1
branch  0 taken 4352
branch  1 taken 2 (fallthrough)
     4352:   69:            EXPECT(true, store.del(i));
     4352:   69-block  0
call    0 returned 4352
call    1 returned 4352
branch  2 taken 4352 (fallthrough)
branch  3 taken 0 (throw)
     4352:   69-block  1
call    4 returned 4352
branch  5 taken 4352 (fallthrough)
branch  6 taken 0 (throw)
     4352:   69-block  2
call    7 returned 4352
branch  8 taken 4352 (fallthrough)
branch  9 taken 0 (throw)
     4352:   69-block  3
call   10 returned 4352
call   11 returned 4352
    $$$$$:   69-block  4
    $$$$$:   69-block  5
    $$$$$:   69-block  6
call   12 never executed
    $$$$$:   69-block  7
    $$$$$:   69-block  8
call   13 never executed
    $$$$$:   69-block  9
        -:   70:
     8706:   71:        for (i = 0; i < max; ++i)
        2:   71-block  0
     8706:   71-block  1
branch  0 taken 8704
branch  1 taken 2 (fallthrough)
     8704:   72:            EXPECT((i & 1) ? std::string(i+1, 's') : not_found,
     8704:   72-block  0
call    0 returned 8704
call    1 returned 8704
branch  2 taken 8704 (fallthrough)
branch  3 taken 0 (throw)
     8704:   72-block  1
call    4 returned 8704
branch  5 taken 8704 (fallthrough)
branch  6 taken 0 (throw)
     8704:   72-block  2
branch  7 taken 4352 (fallthrough)
branch  8 taken 4352
     4352:   72-block  3
call    9 returned 4352
call   10 returned 4352
branch 11 taken 4352 (fallthrough)
branch 12 taken 0 (throw)
     4352:   72-block  4
call   13 returned 4352
branch 14 taken 4352 (fallthrough)
branch 15 taken 0 (throw)
     8704:   72-block  5
call   16 returned 8704
branch 17 taken 8704 (fallthrough)
branch 18 taken 0 (throw)
     8704:   72-block  6
call   19 returned 8704
branch 20 taken 4352 (fallthrough)
branch 21 taken 4352
     4352:   72-block  7
call   22 returned 4352
     8704:   72-block  8
call   23 returned 8704
call   24 returned 8704
call   25 returned 8704
    $$$$$:   72-block  9
call   26 never executed
    $$$$$:   72-block 10
    $$$$$:   72-block 11
branch 27 never executed
branch 28 never executed
    $$$$$:   72-block 12
call   29 never executed
    $$$$$:   72-block 13
    $$$$$:   72-block 14
call   30 never executed
    $$$$$:   72-block 15
    $$$$$:   72-block 16
call   31 never executed
    $$$$$:   72-block 17
    $$$$$:   72-block 18
call   32 never executed
    $$$$$:   72-block 19
        -:   73:                   store.get(i));
        -:   74:
     8704:   75:        for (i = 1; i < max; ++i)
        2:   75-block  0
     8704:   75-block  1
branch  0 taken 8702
branch  1 taken 2 (fallthrough)
     8702:   76:            EXPECT(i & 1, store.del(i));
     8702:   76-block  0
call    0 returned 8702
call    1 returned 8702
branch  2 taken 8702 (fallthrough)
branch  3 taken 0 (throw)
     8702:   76-block  1
call    4 returned 8702
branch  5 taken 8702 (fallthrough)
branch  6 taken 0 (throw)
     8702:   76-block  2
call    7 returned 8702
branch  8 taken 8702 (fallthrough)
branch  9 taken 0 (throw)
     8702:   76-block  3
call   10 returned 8702
call   11 returned 8702
    $$$$$:   76-block  4
    $$$$$:   76-block  5
    $$$$$:   76-block  6
call   12 never executed
    $$$$$:   76-block  7
    $$$$$:   76-block  8
call   13 never executed
    $$$$$:   76-block  9
        -:   77:
        2:   78:        phase();
        2:   78-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -:   79:
        2:   80:        report();
        2:   80-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   81:    }
        2:   81-block  0
call    0 returned 2
call    1 returned 2
    $$$$$:   81-block  1
call    2 never executed
    $$$$$:   81-block  2
call    3 never executed
        -:   82:
        -:   83:public:
function _ZN15CorrectnessTestC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 1 returned 100% blocks executed 100%
        1:   84:    CorrectnessTest(const std::string &dir, bool v=true) : Test(dir, v)
        1:   84-block  0
call    0 returned 1
        -:   85:    {
        1:   86:    }
        -:   87:
function _ZN15CorrectnessTest10start_testEPv called 1 returned 100% blocks executed 100%
        1:   88:    void start_test(void *args = NULL) override
        -:   89:    {
        1:   90:        std::cout << "KVStore Correctness Test" << std::endl;
        1:   90-block  0
call    0 returned 1
call    1 returned 1
        -:   91:
        1:   92:        store.reset();
call    0 returned 1
        -:   93:
        1:   94:        std::cout << "[Simple Test]" << std::endl;
call    0 returned 1
call    1 returned 1
        1:   95:        regular_test(SIMPLE_TEST_MAX);
call    0 returned 1
        -:   96:
        1:   97:        store.reset();
call    0 returned 1
        -:   98:
        1:   99:        std::cout << "[Large Test]" << std::endl;
call    0 returned 1
call    1 returned 1
        1:  100:        regular_test(LARGE_TEST_MAX);
call    0 returned 1
        1:  101:    }
        -:  102:};
        -:  103:
function main called 1 returned 100% blocks executed 52%
        1:  104:int main(int argc, char *argv[])
        -:  105:{
       1*:  106:    bool verbose = (argc == 2 && std::string(argv[1]) == "-v");
        1:  106-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  106-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  106-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  106-block  3
        1:  106-block  4
        1:  106-block  5
branch  9 taken 0 (fallthrough)
branch 10 taken 1
    %%%%%:  106-block  6
call   11 never executed
        1:  106-block  7
branch 12 taken 0 (fallthrough)
branch 13 taken 1
    %%%%%:  106-block  8
call   14 never executed
    $$$$$:  106-block  9
branch 15 never executed
branch 16 never executed
    $$$$$:  106-block 10
call   17 never executed
    $$$$$:  106-block 11
    $$$$$:  106-block 12
branch 18 never executed
branch 19 never executed
    $$$$$:  106-block 13
call   20 never executed
    $$$$$:  106-block 14
        -:  107://    verbose = true;
        1:  108:    std::cout << "Usage: " << argv[0] << " [-v]" << std::endl;
        1:  108-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  108-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  108-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  108-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  109:    std::cout << "  -v: print extra info for failed tests [currently ";
        1:  109-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  110:    std::cout << (verbose ? "ON" : "OFF")<< "]" << std::endl;
        1:  110-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  110-block  1
        1:  110-block  2
        1:  110-block  3
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:  110-block  4
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:  110-block  5
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1:  111:    std::cout << std::endl;
        1:  111-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  112:    std::cout.flush();
        1:  112-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  113:
        2:  114:    CorrectnessTest test("./data", verbose);
        1:  114-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  114-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
    $$$$$:  114-block  2
    $$$$$:  114-block  3
        -:  115:
        1:  116:    test.start_test();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  117:
        1:  118:    return 0;
        1:  119:}
        1:  119-block  0
call    0 returned 1
    $$$$$:  119-block  1
call    1 never executed
