        -:    0:Source:E:/CppProject/dataStruct2023/LSMkv/header/SSTable.h
        -:    0:Graph:E:\CppProject\dataStruct2023\LSMkv\cmake-build-debug-coverage\CMakeFiles\LSMkv_persist.dir\src\SStable.cpp.gcno
        -:    0:Data:E:\CppProject\dataStruct2023\LSMkv\cmake-build-debug-coverage\CMakeFiles\LSMkv_persist.dir\src\SStable.cpp.gcda
        -:    0:Runs:1
        -:    1:#pragma once
        -:    2:
        -:    3:#include "skiplist.h"
        -:    4:#include "../utils.h"
        -:    5:#include "MurmurHash3.h"
        -:    6:#include "Constant.h"
        -:    7:#include <bitset>
        -:    8:
        -:    9://const uint32_t BLOOM_SIZE = 81920;
        -:   10://const uint64_t HEADER_BYTE_SIZE = 10272;
        -:   11://const uint64_t TWO_MB = 2097152;
        -:   12:
        -:   13:
        -:   14:
        -:   15:class BloomFilter
        -:   16:{
        -:   17:    int Bit[BLOOM_SIZE];
        -:   18:public:
function _ZN11BloomFilterC1Ev called 3 returned 100% blocks executed 100%
        3:   19:    BloomFilter() {
   245763:   20:        for(int i = 0;i < BLOOM_SIZE; ++i)
        3:   20-block  0
   245763:   20-block  1
branch  0 taken 245760
branch  1 taken 3 (fallthrough)
   245760:   21:            Bit[i] = 0;
   245760:   21-block  0
        3:   22:    }
function _ZN11BloomFilterC1ERSt6bitsetILy81920EE called 0 returned 0% blocks executed 0%
    #####:   23:    BloomFilter( bitset<BLOOM_SIZE> &bit) {
    #####:   24:        for(int i = 0;i < BLOOM_SIZE; ++i)
    %%%%%:   24-block  0
    %%%%%:   24-block  1
branch  0 never executed
branch  1 never executed
    #####:   25:            Bit[i] = bit[i];
    %%%%%:   25-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   26:    }
function _ZN11BloomFilterD1Ev called 0 returned 0% blocks executed 0%
    #####:   27:    ~BloomFilter() {}
function _ZN11BloomFilter6insertEy called 5172 returned 100% blocks executed 100%
     5172:   28:    void insert(uint64_t key) {
     5172:   29:        unsigned int hash[4] = {0};
     5172:   30:        MurmurHash3_x64_128(&key, sizeof(key), 1, hash);
     5172:   30-block  0
call    0 returned 5172
    25860:   31:        for(unsigned int i = 0; i < 4; ++i )
    25860:   31-block  0
branch  0 taken 20688
branch  1 taken 5172 (fallthrough)
    20688:   32:            Bit[i % BLOOM_SIZE] = 1;
    20688:   32-block  0
     5172:   33:    }
function _ZNK11BloomFilter4findEy called 5637 returned 100% blocks executed 89%
     5637:   34:    bool find(uint64_t key) const {
     5637:   35:        unsigned int hash[4] = {0};
     5637:   36:        MurmurHash3_x64_128(&key, sizeof(key), 1, hash);
     5637:   36-block  0
call    0 returned 5637
    28185:   37:        for(unsigned int i = 0; i < 4; ++i ) {
    22548:   37-block  0
    28185:   37-block  1
branch  0 taken 22548
branch  1 taken 5637 (fallthrough)
    22548:   38:            if (!Bit[i % BLOOM_SIZE])
    22548:   38-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 22548
    #####:   39:                return false;
    %%%%%:   39-block  0
        -:   40:        }
     5637:   41:        return true;
     5637:   41-block  0
        -:   42:    }
function _ZN11BloomFilter6getBitERSt6bitsetILy81920EE called 3 returned 100% blocks executed 100%
        3:   43:    void getBit(bitset<BLOOM_SIZE> &bitset){
   245763:   44:        for(int i = 0;i < BLOOM_SIZE; ++i)
        3:   44-block  0
   245763:   44-block  1
branch  0 taken 245760
branch  1 taken 3 (fallthrough)
   245760:   45:            bitset[i] = Bit[i];
   245760:   45-block  0
call    0 returned 245760
call    1 returned 245760
call    2 returned 245760
        3:   46:    }
        -:   47:};
        -:   48:struct Header {
        -:   49:    uint64_t time_stamp; //时间戳
        -:   50:    uint64_t total_num; //总的键值对
        -:   51:    uint64_t max_key; //最大的key
        -:   52:    uint64_t min_key; //最小的key
function _ZN6HeaderC1Ev called 0 returned 0% blocks executed 0%
    #####:   53:    Header():time_stamp(0), total_num(0), max_key(0), min_key(0) {}
function _ZN6HeaderC1Eyyyy called 3 returned 100% blocks executed 100%
        3:   54:    Header(uint64_t t_s, uint64_t num, uint64_t Max, uint64_t Min):
        3:   55:        time_stamp(t_s), total_num(num), max_key(Max), min_key(Min) {}
function _ZN6HeaderD1Ev called 0 returned 0% blocks executed 0%
    #####:   56:    ~Header() {}
        -:   57:};
        -:   58:
        -:   59:struct Indexer {
        -:   60:    uint64_t key;
        -:   61:    uint32_t offset;
function _ZN7IndexerC1Ev called 0 returned 0% blocks executed 0%
    #####:   62:    Indexer() { };
function _ZN7IndexerC1Eyj called 5172 returned 100% blocks executed 100%
     5172:   63:    Indexer(uint64_t k, uint32_t o): key(k), offset(o) {}
        -:   64:};
        -:   65:class SSTable {
        -:   66:    Header* header;
        -:   67:    BloomFilter* bloom_filter;
        -:   68:    vector<Indexer> index_area;
        -:   69:    vector<string> data_area; //dump的时候暂存数据
        -:   70:    uint64_t Serial; //序列号,用于区分同一时间戳的SSTable（文件命名）
        -:   71:
        -:   72:public:
        -:   73:    SSTable();
        -:   74:    ~SSTable();
        -:   75:    SSTable(SkipList *skip_list, uint64_t time_stamp);
        -:   76:    SSTable(const vector<pair<uint64_t,string>>& data, const uint64_t time_stamp);
        -:   77:    SSTable(const string &file_path, uint64_t time_stamp,uint64_t serial);
        -:   78:    bool get(uint64_t key, uint32_t & offset, int & size);
        -:   79:    bool find(uint64_t key) const{
        -:   80:        return bloom_filter->find(key);
        -:   81:    }
        -:   82:    uint64_t get_min_key() const {
        -:   83:        return header->min_key;
        -:   84:    }
        -:   85:    uint64_t get_max_key() const {
        -:   86:        return header->max_key;
        -:   87:    }
        -:   88:    uint64_t get_total_num() const {
        -:   89:        return header->total_num;
        -:   90:    }
        -:   91:    void save_file(const string &file_name);
        -:   92:    void set_serial(const uint64_t serial) {
        -:   93:        Serial = serial;
        -:   94:    }
        -:   95:    uint64_t get_serial() const {
        -:   96:        return Serial;
        -:   97:    }
        -:   98:    uint64_t get_time_stamp() const {
        -:   99:        return header->time_stamp;
        -:  100:    }
        -:  101:    void read_to_mem(const string &file_path,vector< pair<uint64_t, string> > &data);
        -:  102:
        -:  103:private:
        -:  104:    int binary_search(uint64_t key) const;
        -:  105://    string read_file(const uint32_t offset, const uint32_t size) const;
        -:  106://    string make_file_name();
        -:  107:
        -:  108:};
