        -:    0:Source:E:/CppProject/dataStruct2023/LSMkv/header/SStable.h
        -:    0:Graph:E:\CppProject\dataStruct2023\LSMkv\cmake-build-debug-coverage\CMakeFiles\LSMkv_correct.dir\src\Disk_store.cpp.gcno
        -:    0:Data:E:\CppProject\dataStruct2023\LSMkv\cmake-build-debug-coverage\CMakeFiles\LSMkv_correct.dir\src\Disk_store.cpp.gcda
        -:    0:Runs:1
        -:    1:#pragma once
        -:    2:
        -:    3:#include "skiplist.h"
        -:    4:#include "../utils.h"
        -:    5:#include "MurmurHash3.h"
        -:    6:#include "Constant.h"
        -:    7:#include <bitset>
        -:    8:
        -:    9://const uint32_t BLOOM_SIZE = 81920;
        -:   10://const uint64_t HEADER_BYTE_SIZE = 10272;
        -:   11://const uint64_t TWO_MB = 2097152;
        -:   12:
        -:   13:
        -:   14:
        -:   15:class BloomFilter
        -:   16:{
        -:   17:    int Bit[BLOOM_SIZE];
        -:   18:public:
        -:   19:    BloomFilter() {
        -:   20:        for(int i = 0;i < BLOOM_SIZE; ++i)
        -:   21:            Bit[i] = 0;
        -:   22:    }
        -:   23:    BloomFilter( bitset<BLOOM_SIZE> &bit) {
        -:   24:        for(int i = 0;i < BLOOM_SIZE; ++i)
        -:   25:            Bit[i] = bit[i];
        -:   26:    }
        -:   27:    ~BloomFilter() {}
        -:   28:    void insert(uint64_t key) {
        -:   29:        unsigned int hash[4] = {0};
        -:   30:        MurmurHash3_x64_128(&key, sizeof(key), 1, hash);
        -:   31:        for(unsigned int i = 0; i < 4; ++i )
        -:   32:            Bit[i % BLOOM_SIZE] = 1;
        -:   33:    }
        -:   34:    bool find(uint64_t key) const {
        -:   35:        unsigned int hash[4] = {0};
        -:   36:        MurmurHash3_x64_128(&key, sizeof(key), 1, hash);
        -:   37:        for(unsigned int i = 0; i < 4; ++i ) {
        -:   38:            if (!Bit[i % BLOOM_SIZE])
        -:   39:                return false;
        -:   40:        }
        -:   41:        return true;
        -:   42:    }
        -:   43:    void getBit(bitset<BLOOM_SIZE> &bitset){
        -:   44:        for(int i = 0;i < BLOOM_SIZE; ++i)
        -:   45:            bitset[i] = Bit[i];
        -:   46:    }
        -:   47:};
        -:   48:struct Header {
        -:   49:    uint64_t time_stamp; //时间戳
        -:   50:    uint64_t total_num; //总的键值对
        -:   51:    uint64_t max_key; //最大的key
        -:   52:    uint64_t min_key; //最小的key
        -:   53:    Header():time_stamp(0), total_num(0), max_key(0), min_key(0) {}
        -:   54:    Header(uint64_t t_s, uint64_t num, uint64_t Max, uint64_t Min):
        -:   55:        time_stamp(t_s), total_num(num), max_key(Max), min_key(Min) {}
        -:   56:};
        -:   57:
        -:   58:struct Indexer {
        -:   59:    uint64_t key;
        -:   60:    uint32_t offset;
        -:   61:    Indexer() { };
        -:   62:    Indexer(uint64_t k, uint32_t o): key(k), offset(o) {}
        -:   63:};
        -:   64:class SSTable {
        -:   65:    Header* header;
        -:   66:    BloomFilter* bloom_filter;
        -:   67:    vector<Indexer> index_area;
        -:   68:    vector<string> data_area; //dump的时候暂存数据
        -:   69:    uint64_t Serial; //序列号,用于区分同一时间戳的SSTable（文件命名）
        -:   70:
        -:   71:public:
        -:   72:    SSTable();
        -:   73:    ~SSTable();
        -:   74:    SSTable(SkipList *skip_list, uint64_t time_stamp);
        -:   75:    SSTable(const vector<pair<uint64_t,string>>& data, const uint64_t time_stamp);
        -:   76:    SSTable(const string &file_path, uint64_t time_stamp,uint64_t serial);
        -:   77:    bool get(uint64_t key, uint32_t & offset, int & size);
        -:   78:    bool find(uint64_t key) const{
        -:   79:        return bloom_filter->find(key);
        -:   80:    }
function _ZNK7SSTable11get_min_keyEv called 366996 returned 100% blocks executed 100%
   366996:   81:    uint64_t get_min_key() const {
   366996:   82:        return header->min_key;
   366996:   82-block  0
        -:   83:    }
function _ZNK7SSTable11get_max_keyEv called 134498 returned 100% blocks executed 100%
   134498:   84:    uint64_t get_max_key() const {
   134498:   85:        return header->max_key;
   134498:   85-block  0
        -:   86:    }
function _ZNK7SSTable13get_total_numEv called 110 returned 100% blocks executed 100%
      110:   87:    uint64_t get_total_num() const {
      110:   88:        return header->total_num;
      110:   88-block  0
        -:   89:    }
        -:   90:    void save_file(const string &file_name);
function _ZN7SSTable10set_serialEy called 57 returned 100% blocks executed 100%
       57:   91:    void set_serial(const uint64_t serial) {
       57:   92:        Serial = serial;
       57:   93:    }
function _ZNK7SSTable10get_serialEv called 20461 returned 100% blocks executed 100%
    20461:   94:    uint64_t get_serial() const {
    20461:   95:        return Serial;
    20461:   95-block  0
        -:   96:    }
function _ZNK7SSTable14get_time_stampEv called 49192 returned 100% blocks executed 100%
    49192:   97:    uint64_t get_time_stamp() const {
    49192:   98:        return header->time_stamp;
    49192:   98-block  0
        -:   99:    }
        -:  100:    void read_to_mem(const string &file_path,vector< pair<uint64_t, string> > &data,bool is_end);
        -:  101:
        -:  102:private:
        -:  103:    int binary_search(uint64_t key) const;
        -:  104://    string read_file(const uint32_t offset, const uint32_t size) const;
        -:  105://    string make_file_name();
        -:  106:
        -:  107:};
